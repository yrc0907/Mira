// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  boards        Board[]        // Relation to boards created by this user
  memberships   BoardMember[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Board {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverImage  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  members     BoardMember[]
  inviteCode  String?  @unique
}

model BoardMember {
  id      String @id @default(cuid())
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("todo") // todo, in-progress, completed
  dueDate     DateTime?
  label       String?  // Design, Development, Research, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  boardId     String
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
}